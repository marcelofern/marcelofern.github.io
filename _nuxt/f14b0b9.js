(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{239:function(e,n,t){var content=t(240);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(32).default)("48751daa",content,!0,{sourceMap:!1})},240:function(e,n,t){(n=t(31)(!1)).push([e.i,'.theme--light.v-expansion-panels .v-expansion-panel{background-color:#fff;color:rgba(0,0,0,.87)}.theme--light.v-expansion-panels .v-expansion-panel--disabled{color:rgba(0,0,0,.38)}.theme--light.v-expansion-panels .v-expansion-panel:not(:first-child):after{border-color:rgba(0,0,0,.12)}.theme--light.v-expansion-panels .v-expansion-panel-header .v-expansion-panel-header__icon .v-icon{color:rgba(0,0,0,.54)}.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header:hover:before{opacity:.04}.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:before,.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:hover:before,.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header:focus:before{opacity:.12}.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:focus:before{opacity:.16}.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover:hover:before{opacity:.04}.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:before,.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:hover:before,.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover:focus:before{opacity:.12}.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:focus:before{opacity:.16}.theme--dark.v-expansion-panels .v-expansion-panel{background-color:#1e1e1e;color:#fff}.theme--dark.v-expansion-panels .v-expansion-panel--disabled{color:hsla(0,0%,100%,.5)}.theme--dark.v-expansion-panels .v-expansion-panel:not(:first-child):after{border-color:hsla(0,0%,100%,.12)}.theme--dark.v-expansion-panels .v-expansion-panel-header .v-expansion-panel-header__icon .v-icon{color:#fff}.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header:hover:before{opacity:.08}.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:before,.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:hover:before,.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header:focus:before{opacity:.24}.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:focus:before{opacity:.32}.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover:hover:before{opacity:.08}.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:before,.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:hover:before,.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover:focus:before{opacity:.24}.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:focus:before{opacity:.32}.v-expansion-panels{border-radius:4px;display:flex;flex-wrap:wrap;justify-content:center;list-style-type:none;padding:0;width:100%;z-index:1}.v-expansion-panels>*{cursor:auto}.v-expansion-panels>:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.v-expansion-panels>:last-child{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.v-expansion-panels:not(.v-expansion-panels--accordion):not(.v-expansion-panels--tile)>.v-expansion-panel--active{border-radius:4px}.v-expansion-panels:not(.v-expansion-panels--accordion):not(.v-expansion-panels--tile)>.v-expansion-panel--active+.v-expansion-panel{border-top-left-radius:4px;border-top-right-radius:4px}.v-expansion-panels:not(.v-expansion-panels--accordion):not(.v-expansion-panels--tile)>.v-expansion-panel--next-active{border-bottom-left-radius:4px;border-bottom-right-radius:4px}.v-expansion-panels:not(.v-expansion-panels--accordion):not(.v-expansion-panels--tile)>.v-expansion-panel--next-active .v-expansion-panel-header{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.v-expansion-panel{flex:1 0 100%;max-width:100%;position:relative;transition:.3s cubic-bezier(.25,.8,.5,1)}.v-expansion-panel:before{border-radius:inherit;bottom:0;content:"";left:0;position:absolute;right:0;top:0;z-index:-1;transition:box-shadow .28s cubic-bezier(.4,0,.2,1);will-change:box-shadow;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.v-expansion-panel:not(:first-child):after{border-top:thin solid;content:"";left:0;position:absolute;right:0;top:0;transition:border-color .2s cubic-bezier(.4,0,.2,1),opacity .2s cubic-bezier(.4,0,.2,1)}.v-expansion-panel--disabled .v-expansion-panel-header{pointer-events:none}.v-expansion-panel--active+.v-expansion-panel,.v-expansion-panel--active:not(:first-child){margin-top:16px}.v-expansion-panel--active+.v-expansion-panel:after,.v-expansion-panel--active:not(:first-child):after{opacity:0}.v-expansion-panel--active>.v-expansion-panel-header{min-height:64px}.v-expansion-panel--active>.v-expansion-panel-header--active .v-expansion-panel-header__icon:not(.v-expansion-panel-header__icon--disable-rotate) .v-icon{transform:rotate(-180deg)}.v-expansion-panel-header__icon{display:inline-flex;margin-bottom:-4px;margin-top:-4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.v-application--is-ltr .v-expansion-panel-header__icon{margin-left:auto}.v-application--is-rtl .v-expansion-panel-header__icon{margin-right:auto}.v-expansion-panel-header{align-items:center;border-top-left-radius:inherit;border-top-right-radius:inherit;display:flex;font-size:.9375rem;line-height:1;min-height:48px;outline:none;padding:16px 24px;position:relative;transition:min-height .3s cubic-bezier(.25,.8,.5,1);width:100%}.v-application--is-ltr .v-expansion-panel-header{text-align:left}.v-application--is-rtl .v-expansion-panel-header{text-align:right}.v-expansion-panel-header:not(.v-expansion-panel-header--mousedown):focus:before{opacity:.12}.v-expansion-panel-header:before{background-color:currentColor;border-radius:inherit;bottom:0;content:"";left:0;opacity:0;pointer-events:none;position:absolute;right:0;top:0;transition:opacity .3s cubic-bezier(.25,.8,.5,1)}.v-expansion-panel-header>:not(.v-expansion-panel-header__icon){flex:1 1 auto}.v-expansion-panel-content{display:flex}.v-expansion-panel-content__wrap{padding:0 24px 16px;flex:1 1 auto;max-width:100%}.v-expansion-panels--accordion>.v-expansion-panel{margin-top:0}.v-expansion-panels--accordion>.v-expansion-panel:after{opacity:1}.v-expansion-panels--popout>.v-expansion-panel{max-width:calc(100% - 32px)}.v-expansion-panels--popout>.v-expansion-panel--active{max-width:calc(100% + 16px)}.v-expansion-panels--inset>.v-expansion-panel{max-width:100%}.v-expansion-panels--inset>.v-expansion-panel--active{max-width:calc(100% - 32px)}.v-expansion-panels--flat>.v-expansion-panel:after{border-top:none}.v-expansion-panels--flat>.v-expansion-panel:before{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.v-expansion-panels--tile,.v-expansion-panels--tile>.v-expansion-panel:before{border-radius:0}',""]),e.exports=n},244:function(e,n,t){"use strict";t(27),t(13),t(6),t(4),t(16);var o=t(3),r=t(238),l=t(234),c=t(2),v=t(39);function d(object,e){var n=Object.keys(object);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(object);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),n.push.apply(n,t)}return n}n.a=Object(v.a)(Object(r.a)("expansionPanels","v-expansion-panel","v-expansion-panels"),Object(l.b)("expansionPanel",!0)).extend({name:"v-expansion-panel",props:{disabled:Boolean,readonly:Boolean},data:function(){return{content:null,header:null,nextIsActive:!1}},computed:{classes:function(){return function(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?d(Object(source),!0).forEach((function(n){Object(o.a)(e,n,source[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):d(Object(source)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(source,n))}))}return e}({"v-expansion-panel--active":this.isActive,"v-expansion-panel--next-active":this.nextIsActive,"v-expansion-panel--disabled":this.isDisabled},this.groupClasses)},isDisabled:function(){return this.expansionPanels.disabled||this.disabled},isReadonly:function(){return this.expansionPanels.readonly||this.readonly}},methods:{registerContent:function(e){this.content=e},unregisterContent:function(){this.content=null},registerHeader:function(e){this.header=e,e.$on("click",this.onClick)},unregisterHeader:function(){this.header=null},onClick:function(e){e.detail&&this.header.$el.blur(),this.$emit("click",e),this.isReadonly||this.isDisabled||this.toggle()},toggle:function(){var e=this;this.content&&(this.content.isBooted=!0),this.$nextTick((function(){return e.$emit("change")}))}},render:function(e){return e("div",{staticClass:"v-expansion-panel",class:this.classes,attrs:{"aria-expanded":String(this.isActive)}},Object(c.p)(this))}})},245:function(e,n,t){"use strict";var o=t(237),r=t(242),l=t(112),c=t(234),v=t(2),d=t(39),x=Object(d.a)(r.a,l.a,Object(c.a)("expansionPanel","v-expansion-panel-content","v-expansion-panel"));n.a=x.extend().extend({name:"v-expansion-panel-content",computed:{isActive:function(){return this.expansionPanel.isActive}},created:function(){this.expansionPanel.registerContent(this)},beforeDestroy:function(){this.expansionPanel.unregisterContent()},render:function(e){var n=this;return e(o.a,this.showLazyContent((function(){return[e("div",n.setBackgroundColor(n.color,{staticClass:"v-expansion-panel-content",directives:[{name:"show",value:n.isActive}]}),[e("div",{class:"v-expansion-panel-content__wrap"},Object(v.p)(n))])]})))}})},246:function(e,n,t){"use strict";t(27),t(13),t(6),t(4),t(16);var o=t(3),r=t(237),l=t(236),c=t(112),v=t(234),d=t(235),x=t(2),h=t(39);function _(object,e){var n=Object.keys(object);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(object);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),n.push.apply(n,t)}return n}function f(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?_(Object(source),!0).forEach((function(n){Object(o.a)(e,n,source[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):_(Object(source)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(source,n))}))}return e}var m=Object(h.a)(c.a,Object(v.a)("expansionPanel","v-expansion-panel-header","v-expansion-panel"));n.a=m.extend().extend({name:"v-expansion-panel-header",directives:{ripple:d.a},props:{disableIconRotate:Boolean,expandIcon:{type:String,default:"$expand"},hideActions:Boolean,ripple:{type:[Boolean,Object],default:!1}},data:function(){return{hasMousedown:!1}},computed:{classes:function(){return{"v-expansion-panel-header--active":this.isActive,"v-expansion-panel-header--mousedown":this.hasMousedown}},isActive:function(){return this.expansionPanel.isActive},isDisabled:function(){return this.expansionPanel.isDisabled},isReadonly:function(){return this.expansionPanel.isReadonly}},created:function(){this.expansionPanel.registerHeader(this)},beforeDestroy:function(){this.expansionPanel.unregisterHeader()},methods:{onClick:function(e){this.$emit("click",e)},genIcon:function(){var e=Object(x.p)(this,"actions")||[this.$createElement(l.a,this.expandIcon)];return this.$createElement(r.c,[this.$createElement("div",{staticClass:"v-expansion-panel-header__icon",class:{"v-expansion-panel-header__icon--disable-rotate":this.disableIconRotate},directives:[{name:"show",value:!this.isDisabled}]},e)])}},render:function(e){var n=this;return e("button",this.setBackgroundColor(this.color,{staticClass:"v-expansion-panel-header",class:this.classes,attrs:{tabindex:this.isDisabled?-1:null,type:"button"},directives:[{name:"ripple",value:this.ripple}],on:f(f({},this.$listeners),{},{click:this.onClick,mousedown:function(){return n.hasMousedown=!0},mouseup:function(){return n.hasMousedown=!1}})}),[Object(x.p)(this,"default",{open:this.isActive},!0),this.hideActions||this.genIcon()])}})},248:function(e,n,t){"use strict";t(27),t(13),t(6),t(4),t(16);var o=t(3),r=(t(239),t(243)),l=t(18);function c(object,e){var n=Object.keys(object);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(object);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),n.push.apply(n,t)}return n}function v(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?c(Object(source),!0).forEach((function(n){Object(o.a)(e,n,source[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):c(Object(source)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(source,n))}))}return e}n.a=r.a.extend({name:"v-expansion-panels",provide:function(){return{expansionPanels:this}},props:{accordion:Boolean,disabled:Boolean,flat:Boolean,hover:Boolean,focusable:Boolean,inset:Boolean,popout:Boolean,readonly:Boolean,tile:Boolean},computed:{classes:function(){return v(v({},r.a.options.computed.classes.call(this)),{},{"v-expansion-panels":!0,"v-expansion-panels--accordion":this.accordion,"v-expansion-panels--flat":this.flat,"v-expansion-panels--hover":this.hover,"v-expansion-panels--focusable":this.focusable,"v-expansion-panels--inset":this.inset,"v-expansion-panels--popout":this.popout,"v-expansion-panels--tile":this.tile})}},created:function(){this.$attrs.hasOwnProperty("expand")&&Object(l.a)("expand","multiple",this),Array.isArray(this.value)&&this.value.length>0&&"boolean"==typeof this.value[0]&&Object(l.a)(':value="[true, false, true]"',':value="[0, 2]"',this)},methods:{updateItem:function(e,n){var t=this.getValue(e,n),o=this.getValue(e,n+1);e.isActive=this.toggleMethod(t),e.nextIsActive=this.toggleMethod(o)}}})},253:function(e,n,t){var content=t(273);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(32).default)("42073df0",content,!0,{sourceMap:!1})},272:function(e,n,t){"use strict";t(253)},273:function(e,n,t){(n=t(31)(!1)).push([e.i,".graph-pic[data-v-319bf9af]{padding:30px 0;display:block;width:100%;margin:0 auto}",""]),e.exports=n},365:function(e,n,t){"use strict";t.r(n);var o={data:function(){return{firstPlotImg:"/images/data_visualisation/k_means_dataset_white.png",secondPlotImg:"/images/data_visualisation/k_means_first_centroids_white.png",thirdPlotImg:"/images/data_visualisation/k_means_first_clusters_white.png",forthPlotImg:"/images/data_visualisation/k_means_second_clusters_white.png",fifthPlotImg:"/images/data_visualisation/k_means_third_clusters_white.png"}},head:{title:"K-means Clustering From Scratch",meta:[{hid:"description",name:"description",content:"K-means Clustering From Scratch - Marcelo Fernandes"}]}},r=(t(272),t(56)),l=t(72),c=t.n(l),v=t(244),d=t(245),x=t(246),h=t(248),_=t(224),f=t(231),m=t(232),component=Object(r.a)(o,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("v-layout",{staticClass:"post"},[t("v-flex",[t("v-row",[t("h1",[e._v("K-means Clustering From Scratch")])]),e._v(" "),t("v-row",[t("p",{staticClass:"caption"},[e._v("Date: 2021-03-15")])]),e._v(" "),t("v-row",[t("p",[e._v("\n          Find the K-means clusters for the given the dataset and K=3.\n        ")])]),e._v(" "),t("v-row",[t("p"),t("blockquote",[e._v("\n            A1 = (2,10),"),t("br"),e._v("\n            A2 = (2,5),"),t("br"),e._v("\n            A3 = (8,4),"),t("br"),e._v("\n            A4 = (5,8),"),t("br"),e._v("\n            A5 = (7,5),"),t("br"),e._v("\n            A6 = (6,4),"),t("br"),e._v("\n            A7 = (1,2),"),t("br"),e._v("\n            A8 = (4,9)\n          ")]),e._v(" "),t("p")]),e._v(" "),t("v-row",{staticClass:"graph-pic"},[t("v-row",[t("a",{staticClass:"img-link",attrs:{href:e.firstPlotImg,target:"_blank"}},[t("img",{attrs:{src:e.firstPlotImg}})])])],1),e._v(" "),t("v-row",[t("v-expansion-panels",[t("v-expansion-panel",[t("v-expansion-panel-header",[e._v("\n              [Expand] Python code for the graph above\n            ")]),e._v(" "),t("v-expansion-panel-content",[t("blockquote",[t("pre",[e._v("                  "),t("var",[e._v("\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\nx_coordinates = [2,2,8,5,7,6,1,4]\ny_coordinates = [10,5,4,8,5,4,2,9]\npoints = ['A1','A2','A3','A4','A5','A6','A7','A8']\n\n# graph configuration\nplt.grid(b=None)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.xlim([0,10.5])\nplt.ylim([0,11.2])\n\n# labels!\nfor point, x, y in zip(points, x_coordinates, y_coordinates):\n    label = f\"{point} ({x},{y})\"\n    plt.annotate(\n        label,\n        (x,y),\n        textcoords=\"offset points\", # how to position the text\n        xytext=(0,10), # distance from text to points (x,y)\n        ha='center' # horizontal alignment\n    )\n\n# plot!\nfig = plt.plot(x_coordinates, y_coordinates, 'o', color='black')")])])])])],1)],1)],1),e._v(" "),t("v-row",[t("h2",[e._v("\n          1. Select 3 random data points to be the center of your clusters.\n        ")])]),e._v(" "),t("v-row",[t("p",[e._v("\n          Let's select three numbers between 0 and the length of the dataset\n        ")])]),e._v(" "),t("v-row",[t("blockquote",[t("var",[t("pre",[e._v("import random\nindexes = random.sample(range(1, len(x_coordinates) + 1), 3)\nindexes\n>>> [1, 4, 7]\n        ")])])])]),e._v(" "),t("v-row",[t("p",[e._v("\n          This means that A1, A4, and A7 have been selected to be our initial\n          centroids.\n        ")])]),e._v(" "),t("v-row",{staticClass:"graph-pic"},[t("v-row",[t("a",{staticClass:"img-link",attrs:{href:e.secondPlotImg,target:"_blank"}},[t("img",{attrs:{src:e.secondPlotImg}})])])],1),e._v(" "),t("v-row",[t("v-expansion-panels",[t("v-expansion-panel",[t("v-expansion-panel-header",[e._v("\n              [Expand] Python code for the graph above\n            ")]),e._v(" "),t("v-expansion-panel-content",[t("blockquote",[t("pre",[e._v("                  "),t("var",[e._v("\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\nx_coordinates = [2,2,8,5,7,6,1,4]\ny_coordinates = [10,5,4,8,5,4,2,9]\ncentroids_x = [2,5,1]\ncentroids_y = [10,8,2]\npoints = ['A1','A2','A3','A4','A5','A6','A7','A8']\n\n# plot!\nfig = plt.figure()\nax = fig.add_subplot(111)\n\n# graph configuration\nplt.grid(b=None)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.xlim([0,10.5])\nplt.ylim([0,11.2])\n\n# labels!\nfor point, x, y in zip(points, x_coordinates, y_coordinates):\n    label = f\"{point} ({x},{y})\"\n    ax.annotate(\n        label,\n        (x,y),\n        textcoords=\"offset points\", # how to position the text\n        xytext=(0,10), # distance from text to points (x,y)\n        ha='center' # horizontal alignment\n    )\n\nax.scatter(\n    x_coordinates, y_coordinates, marker='o',\n    color='black', label='datapoints'\n)\nax.scatter(\n    centroids_x, centroids_y, marker='x',\n    color='red', label='centroids', s=120\n)\nax.legend()")])])])])],1)],1)],1),e._v(" "),t("v-row",[t("h2",[e._v("\n          2. For each point, find the the closest centroid.\n        ")])]),e._v(" "),t("v-row",[t("p",[e._v("\n          We calculate the distance between a given point and the three centroids.\n          The point is then assigned to the cluster belonging to the centroid\n          with the shortest distance.\n        ")]),e._v(" "),t("p",[e._v("\n          The distance will be calculated by:\n        ")])]),e._v(" "),t("v-row",[t("blockquote",[t("var",[t("pre",[e._v("Distance(v1, v2) = ( (v1.x - v2.x)**2 + (v1.y - v2.y)**2 ) **.5\n")])])])]),e._v(" "),t("v-row",{staticClass:"graph-pic"},[t("v-row",[t("a",{staticClass:"img-link",attrs:{href:e.thirdPlotImg,target:"_blank"}},[t("img",{attrs:{src:e.thirdPlotImg}})])])],1),e._v(" "),t("v-row",[t("v-expansion-panels",[t("v-expansion-panel",[t("v-expansion-panel-header",[e._v("\n              [Expand] Python code for the graph above\n            ")]),e._v(" "),t("v-expansion-panel-content",[t("blockquote",[t("pre",[e._v("                  "),t("var",[e._v("\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\npoints_names = ['A1','A2','A3','A4','A5','A6','A7','A8']\n\ndata_points = [[2,10], [2,5], [8,4], [5,8], [7,5], [6,4], [1,2], [4,9]]\nx_coordinates = [point[0] for point in data_points]\ny_coordinates = [point[1] for point in data_points]\n\ncentroid_1 = [2,10]\ncentroid_2 = [5,8]\ncentroid_3 = [1,2]\n\ncentroids = [centroid_1, centroid_2, centroid_3]\n\ncluster_1 = []\ncluster_2 = []\ncluster_3 = []\n\ndef distance(v1, v2):\n    return ( (v1[0] - v2[0])**2 + (v1[1] - v2[1])**2 )**0.5\n\nfor point in data_points:\n    dist_c1 = distance(point, centroids[0])\n    dist_c2 = distance(point, centroids[1])\n    dist_c3 = distance(point, centroids[2])\n    min_distance = min([dist_c1, dist_c2, dist_c3])\n    if min_distance == dist_c1:\n        cluster_1.append(point)\n    elif min_distance == dist_c2:\n        cluster_2.append(point)\n    else:\n        cluster_3.append(point)\n        \ncluster_1_x = [point[0] for point in cluster_1]\ncluster_2_x = [point[0] for point in cluster_2]\ncluster_3_x = [point[0] for point in cluster_3]\n\ncluster_1_y = [point[1] for point in cluster_1]\ncluster_2_y = [point[1] for point in cluster_2]\ncluster_3_y = [point[1] for point in cluster_3]\n    \n# initiate the plot\nfig = plt.figure()\nax = fig.add_subplot(111)\n\n# graph configuration\nplt.grid(b=None)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.xlim([0,10.5])\nplt.ylim([0,11.2])\n\n\n# labels\nfor point_name, x, y in zip(points_names, x_coordinates, y_coordinates):\n    label = f\"{point_name} ({x},{y})\"\n    ax.annotate(\n        label,\n        (x,y),\n        textcoords=\"offset points\", # how to position the text\n        xytext=(0,10), # distance from text to points (x,y)\n        ha='center' # horizontal alignment\n    )\n\n# plot the data\nax.scatter(\n    cluster_1_x, cluster_1_y, marker='o', \n    color='green', label='cluster 1'\n)\nax.scatter(\n    cluster_2_x, cluster_2_y, marker='o', \n    color='red', label='cluster 2'\n)\nax.scatter(\n    cluster_3_x, cluster_3_y, marker='o', \n    color='blue', label='cluster 2'\n)\nax.scatter(\n    centroid_1[0], centroid_1[1], marker='x', \n    color='green', label='centroid 1', s=120\n)\nax.scatter(\n    centroid_2[0], centroid_2[1], marker='x', \n    color='red', label='centroid 2', s=120\n)\nax.scatter(\n    centroid_3[0], centroid_3[1], marker='x', \n    color='blue', label='centroid 3', s=120\n)\nax.legend()")])])])])],1)],1)],1),e._v(" "),t("v-row",[t("h2",[e._v("3. Calculate the new centroids")])]),e._v(" "),t("v-row",[t("p",[e._v("New centroids can be calculated by finding the average\n        point in a given cluster:")])]),e._v(" "),t("v-row",[t("blockquote",[t("pre",[e._v("def new_centroid(cluster):\n    length = len(cluster)\n    mean_x = sum([x for x, _ in cluster])/length\n    mean_y = sum([y for _, y in cluster])/length\n    return [mean_x, mean_y]")])])]),e._v(" "),t("v-row",[t("p",[t("br"),e._v("Our new centroids will therefore be:\n        ")])]),e._v(" "),t("v-row",[t("blockquote",[t("pre",[e._v("[2.0, 10.0]\n[6.0, 6.0]\n[1.5, 3.5]")])])]),e._v(" "),t("v-row",[t("h2",[e._v("\n          4. Repeat\n        ")])]),e._v(" "),t("v-row",[t("p",[e._v("\n          Repeat steps 2. and 3. until the algorithm converges\n        ")])]),e._v(" "),t("v-row",[t("h3",[e._v("Second interaction")])]),e._v(" "),t("v-row",{staticClass:"graph-pic"},[t("v-row",[t("a",{staticClass:"img-link",attrs:{href:e.forthPlotImg,target:"_blank"}},[t("img",{attrs:{src:e.forthPlotImg}})])])],1),e._v(" "),t("v-row",[t("p",[t("br"),e._v("New centroids\n        ")])]),e._v(" "),t("v-row",[t("blockquote",[t("pre",[e._v("[3.0, 9.5]\n[6.5, 5.25]\n[1.5, 3.5]\n")])])]),e._v(" "),t("v-row",[t("h3",[e._v("Third interaction")])]),e._v(" "),t("v-row",{staticClass:"graph-pic"},[t("v-row",[t("a",{staticClass:"img-link",attrs:{href:e.fifthPlotImg,target:"_blank"}},[t("img",{attrs:{src:e.fifthPlotImg}})])])],1),e._v(" "),t("v-row",[t("p",[t("br"),e._v("New centroids\n        ")])]),e._v(" "),t("v-row",[t("blockquote",[t("pre",[e._v("[3.6666666666666665, 9.0]\n[7.0, 4.333333333333333]\n[1.5, 3.5]\n")])])]),e._v(" "),t("v-row",[t("h3",[e._v("Forth interaction (convergence)")])]),e._v(" "),t("v-row",{staticClass:"graph-pic"},[t("v-row",[t("a",{staticClass:"img-link",attrs:{href:e.fifthPlotImg,target:"_blank"}},[t("img",{attrs:{src:e.fifthPlotImg}})])])],1),e._v(" "),t("v-row",[t("p",[t("br"),e._v("New centroids (same as previous step)\n        ")])]),e._v(" "),t("v-row",[t("blockquote",[t("pre",[e._v("[3.6666666666666665, 9.0]\n[7.0, 4.333333333333333]\n[1.5, 3.5]\n")])])]),e._v(" "),t("v-row",[t("p",[t("br")])]),e._v(" "),t("v-row",[t("v-expansion-panels",[t("v-expansion-panel",[t("v-expansion-panel-header",[e._v("\n              [Expand] Python code for the graph above\n            ")]),e._v(" "),t("v-expansion-panel-content",[t("blockquote",[t("pre",[e._v("                  "),t("var",[e._v("\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\npoints_names = ['A1','A2','A3','A4','A5','A6','A7','A8']\n\ndata_points = [[2,10], [2,5], [8,4], [5,8], [7,5], [6,4], [1,2], [4,9]]\nx_coordinates = [point[0] for point in data_points]\ny_coordinates = [point[1] for point in data_points]\n\ncentroid_1 = [3.6666666666666665, 9.0]\ncentroid_2 = [7.0, 4.333333333333333]\ncentroid_3 = [1.5, 3.5]\n\ncentroids = [centroid_1, centroid_2, centroid_3]\n\ncluster_1 = []\ncluster_2 = []\ncluster_3 = []\n\ndef distance(v1, v2):\n    return ( (v1[0] - v2[0])**2 + (v1[1] - v2[1])**2 )**0.5\n\nfor point in data_points:\n    dist_c1 = distance(point, centroids[0])\n    dist_c2 = distance(point, centroids[1])\n    dist_c3 = distance(point, centroids[2])\n    min_distance = min([dist_c1, dist_c2, dist_c3])\n    if min_distance == dist_c1:\n        cluster_1.append(point)\n    elif min_distance == dist_c2:\n        cluster_2.append(point)\n    else:\n        cluster_3.append(point)\n        \ncluster_1_x = [point[0] for point in cluster_1]\ncluster_2_x = [point[0] for point in cluster_2]\ncluster_3_x = [point[0] for point in cluster_3]\n\ncluster_1_y = [point[1] for point in cluster_1]\ncluster_2_y = [point[1] for point in cluster_2]\ncluster_3_y = [point[1] for point in cluster_3]\n    \n# initiate the plot\nfig = plt.figure()\nax = fig.add_subplot(111)\n\n# graph configuration\nplt.grid(b=None)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.xlim([0,10.5])\nplt.ylim([0,11.2])\n\n\n# labels\nfor point_name, x, y in zip(points_names, x_coordinates, y_coordinates):\n    label = f\"{point_name} ({x},{y})\"\n    ax.annotate(\n        label,\n        (x,y),\n        textcoords=\"offset points\", # how to position the text\n        xytext=(0,10), # distance from text to points (x,y)\n        ha='center' # horizontal alignment\n    )\n\n# plot the data\nax.scatter(\n    cluster_1_x, cluster_1_y, marker='o', \n    color='green', label='cluster 1'\n)\nax.scatter(\n    cluster_2_x, cluster_2_y, marker='o', \n    color='red', label='cluster 2'\n)\nax.scatter(\n    cluster_3_x, cluster_3_y, marker='o', \n    color='blue', label='cluster 2'\n)\nax.scatter(\n    centroid_1[0], centroid_1[1], marker='x', \n    color='green', label='centroid 1', s=120\n)\nax.scatter(\n    centroid_2[0], centroid_2[1], marker='x', \n    color='red', label='centroid 2', s=120\n)\nax.scatter(\n    centroid_3[0], centroid_3[1], marker='x', \n    color='blue', label='centroid 3', s=120\n)\nax.legend()\n\ndef new_centroid(cluster):\n    length = len(cluster)\n    mean_x = sum([x for x, _ in cluster])/length\n    mean_y = sum([y for _, y in cluster])/length\n    return [mean_x, mean_y]\n\nprint(new_centroid(cluster_1))\nprint(new_centroid(cluster_2))\nprint(new_centroid(cluster_3))")])])])])],1)],1)],1)],1)],1)}),[],!1,null,"319bf9af",null);n.default=component.exports;c()(component,{VExpansionPanel:v.a,VExpansionPanelContent:d.a,VExpansionPanelHeader:x.a,VExpansionPanels:h.a,VFlex:_.a,VLayout:f.a,VRow:m.a})}}]);