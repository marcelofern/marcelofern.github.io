(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{217:function(e,t,n){"use strict";n(111);var o=n(74);t.a=Object(o.a)("layout")},218:function(e,t,n){"use strict";n(26),n(12);var o=n(3),r=(n(46),n(209),n(47),n(6),n(4),n(17),n(58),n(59),n(145),n(0)),l=n(112),d=n(2);function v(object,e){var t=Object.keys(object);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(object);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?v(Object(source),!0).forEach((function(t){Object(o.a)(e,t,source[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):v(Object(source)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(source,t))}))}return e}var h=["sm","md","lg","xl"],_=["start","end","center"];function m(e,t){return h.reduce((function(n,o){return n[e+Object(d.n)(o)]=t(),n}),{})}var f=function(e){return[].concat(_,["baseline","stretch"]).includes(e)},y=m("align",(function(){return{type:String,default:null,validator:f}})),w=function(e){return[].concat(_,["space-between","space-around"]).includes(e)},N=m("justify",(function(){return{type:String,default:null,validator:w}})),F=function(e){return[].concat(_,["space-between","space-around","stretch"]).includes(e)},j=m("alignContent",(function(){return{type:String,default:null,validator:F}})),C={align:Object.keys(y),justify:Object.keys(N),alignContent:Object.keys(j)},I={align:"align",justify:"justify",alignContent:"align-content"};function A(e,t,n){var o=I[e];if(null!=n){if(t){var r=t.replace(e,"");o+="-".concat(r)}return(o+="-".concat(n)).toLowerCase()}}var T=new Map;t.a=r.a.extend({name:"v-row",functional:!0,props:c(c(c({tag:{type:String,default:"div"},dense:Boolean,noGutters:Boolean,align:{type:String,default:null,validator:f}},y),{},{justify:{type:String,default:null,validator:w}},N),{},{alignContent:{type:String,default:null,validator:F}},j),render:function(e,t){var n=t.props,data=t.data,r=t.children,d="";for(var v in n)d+=String(n[v]);var c=T.get(d);return c||function(){var e,t;for(t in c=[],C)C[t].forEach((function(e){var o=n[e],r=A(t,e,o);r&&c.push(r)}));c.push((e={"no-gutters":n.noGutters,"row--dense":n.dense},Object(o.a)(e,"align-".concat(n.align),n.align),Object(o.a)(e,"justify-".concat(n.justify),n.justify),Object(o.a)(e,"align-content-".concat(n.alignContent),n.alignContent),e)),T.set(d,c)}(),e(n.tag,Object(l.a)(data,{staticClass:"row",class:c}),r)}})},240:function(e,t,n){"use strict";n.r(t);var o={data:function(){return{}},head:{title:"Database Design - MarceloFern",meta:[{hid:"description",name:"description",content:"Database Design - Marcelo Fernandes - Data Model, ERD, Functional Dependency, Normalisation (1NF - 2NF - 3NF - BCNF - 4NF)."}]}},r=n(53),l=n(73),d=n.n(l),v=n(216),c=n(217),h=n(218),component=Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-layout",{staticClass:"post"},[n("v-flex",[n("v-row",[n("h1",[e._v("Database Design")])]),e._v(" "),n("v-row",[n("h2",{attrs:{id:"data-model"}},[e._v("Data Model")])]),e._v(" "),n("v-row",[n("p",[e._v("\n        A database design usually starts by the high-level description\n        of the schema to be implemented. The idea is to analyse\n        what the organisation requirements are, and to frame it\n        on a schema that a variety of users would understand.\n      ")]),e._v(" "),n("p",[e._v("\n        The outcome of this exercise, is a "),n("b",[n("i",[e._v("data model")])]),e._v(".\n        A "),n("b",[n("i",[e._v("data model")])]),e._v(" is a representation, often in a diagram,\n        of the data relationship from an organisation.\n        This representation will describe the data and provide\n        a guideline of how this data could be manipulated and retrieved.\n      ")]),e._v(" "),n("p",[e._v("\n        The data model is composed of three components\n      ")])]),e._v(" "),n("v-row",[n("ol",[n("li",[n("b",[n("i",[e._v("Structural:")])]),e._v(" A collection of relationships\n          that construct the data. This includes the diagrams,\n          the "),n("i",[e._v("entities")]),e._v(" and their dependencies, what their names are, \n          what types of data those entities host, etc.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Manipulative:")])]),e._v(" The available operations\n          on the data. Directives to instruct what data can be retrieved,\n          updated, or deleted.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Integrity constraints:")])]),e._v(" The checks\n          that guarantee the data is consistent and makes sense.\n        ")])])]),e._v(" "),n("br"),e._v(" "),n("v-row",[n("p",[e._v("\n        The optimal data model can be found if the following\n        criteria is satisfied:\n      ")]),e._v(" "),n("ol",[n("li",[n("b",[n("i",[e._v("Consistent:")])]),e._v(" The model represents a clear\n          mapping of the organisation information.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Minimal:")])]),e._v(" No entity or property is dispensable.\n          No non-necessary dependencies are present.\n          It is also easy for all the organisation users to understand\n          the data model.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Distinguishable:")])]),e._v(" Different data can be told\n          apart without confusion.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Non-redundant:")])]),e._v(" There is only one way to represent\n          an entity and its attributes.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Not application bound:")])]),e._v(" The data model should not\n          change based on what database system is being used.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Extensible:")])]),e._v(" New features can be added\n          without breaking the existent schema.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Easy to draw:")])]),e._v(" If the diagram of a said data-model is\n          difficult to draw, one of the criteria above hasn't been \n          completely satisfied. \n        ")])]),e._v(" "),n("br")]),e._v(" "),n("v-row",[n("h2",{attrs:{id:"er"}},[e._v("Entity-Relationship (ER)")])]),e._v(" "),n("v-row",[n("p",[e._v("\n        Before we move further, let's define what an entity is.\n        An "),n("b",[n("i",[e._v("entity")])]),e._v(" is an object in the organisation that\n        can be represented in the database (a person, location, thing,\n        concept, event, etc...). An entity can have\n        any number of "),n("b",[n("i",[e._v("attributes")])]),e._v(". Those attributes\n        are properties that describe the data stored in that entity.\n        An entity that represents a location, could have a set of\n        coordinates as one of its attributes. Entities are then\n        connected via "),n("b",[n("i",[e._v("relationships")])]),e._v(".\n      ")])]),e._v(" "),n("v-row",[n("h2",{attrs:{id:"design-phases"}},[e._v("Database Design Phases")])]),e._v(" "),n("v-row",[n("p",[e._v("\n        The process of designing a database can be split into three\n        different phases:\n      ")])]),e._v(" "),n("v-row",[n("ol",[n("li",[n("b",[n("i",[e._v("Conceptual Phase:")])]),e._v(" The creation of a data model\n          concept that is put to proof against users' requirements. This\n          phase does not involve any particular implementation details.\n          This phase will present the entities and their attributes.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Logical Phase:")])]),e._v(" The model concept is enhanced with\n          the relationship logic. This means that the relationship between\n          data, its constrains, and data retrieval/update/deletion\n          queries are added. The model should then be put\n          to proof against users' requirements once more.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Physical Phase:")])]),e._v(" Decision of how the database is\n          implemented. It takes into account\n          which database management system (DBMS) will be used, what tables\n          will be created, what security protocol will be implemented,\n          what constraints and indexes will be created, and so on.\n        ")])])]),e._v(" "),n("br"),e._v(" "),n("v-row",[n("p",[e._v("\n        Note that the database design is an organic process. The database\n        will change as the organisation grows and requires updates.\n      ")]),e._v(" "),n("br")]),e._v(" "),n("v-row",[n("h2",[e._v("Functional Dependency")])]),e._v(" "),n("v-row",[n("p",[e._v("\n        A functional dependency between attributes describes how\n        those attributes are related.\n      ")]),e._v(" "),n("p",[n("b",[e._v("Formal definition:")]),e._v(" If "),n("i",[e._v("A")]),e._v(" and "),n("i",[e._v("B")]),e._v(" are attributes\n        of a relation "),n("i",[e._v("R")]),e._v(", "),n("i",[e._v("B")]),e._v(" is functionally dependent on\n        "),n("i",[e._v("A")]),e._v(" if each value of "),n("i",[e._v("A")]),e._v(" is associated with exactly one\n        value of "),n("i",[e._v("B")]),e._v(". In this case, "),n("i",[e._v("A")]),e._v(" is called the\n        "),n("b",[e._v("determinant")]),n("br"),e._v(" "),n("b",[e._v("Notation:")]),e._v(" "),n("i",[e._v("A")]),e._v(" Â® "),n("i",[e._v("B")]),e._v(" (or "),n("i",[e._v("A")]),e._v(" "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v(" "),n("i",[e._v("B")]),e._v(")\n      ")]),e._v(" "),n("p",[n("b",[e._v("Example:")]),e._v(" Consider an entity Player with the following\n        attributes: "),n("i",[e._v("playerId, fName, position")]),e._v(". We can determine\n        the position of a certain player, by knowing what the value of\n        playerId is.\n        In other words, playerId determines the position\n        (playerId "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v("\n        position). But the opposite is not true, knowing the position\n        doesn't imply knowing the playerId.\n      ")]),e._v(" "),n("p",[e._v("\n        Functional dependencies can be broken down into 3 different types:\n      ")])]),e._v(" "),n("v-row",[n("ol",[n("li",[n("b",[n("i",[e._v("Partial Functional Dependency:")])]),e._v(" A\n          "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v(" B is a\n          partial functional dependency if there is an attribute that can be\n          removed from A and yet the dependency still holds. Consider\n          the entity Player with the attributes playerId, name, and teamId.\n          We have that:\n          "),n("blockquote",[e._v("\n            playerId, name "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v(" teamId\n          ")]),e._v("\n          But the name attribute is not really necessary to determine\n          teamId. Therefore, the name\n          attribute could be removed but the functional dependency would\n          still exist between playerId and teamId.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Full Functional Dependency:")])]),e._v(" A\n          "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v(" B is a\n          full functional dependency if removal of any attribute from A\n          results in the dependency no longer existing. Consider the entity\n          Player with attributes playerId and position. We then\n          have that:"),n("br"),e._v(" "),n("blockquote",[e._v("\n            playerId "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v(" position"),n("br")]),e._v("\n          If we remove the playerId attribute, the dependency\n          no longer exists.\n        ")]),e._v(" "),n("li",[n("b",[n("i",[e._v("Transitive Dependency:")])]),e._v(" Given that A, B, and C\n          are attributes of a relation and A\n          "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v(" B and\n          B "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v(" C, then\n          C is a transivite dependency of A via B. Consider the entity\n          Player:\n          "),n("blockquote",[e._v("\n            playerId "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v(" name, position,\n            teamId, teamName"),n("br"),e._v("\n            teamId "),n("b",{staticClass:"red-str-text"},[e._v("->")]),e._v(" teamName"),n("br")]),e._v("\n          playerId determines the teamName attribute via the\n          teamId attribute. In this case, teamName is transitively dependent\n          on playerId via teamId.\n        ")])])]),e._v(" "),n("v-row",[n("h2",{attrs:{id:"Normalisation"}},[e._v("Normalisation")])]),e._v(" "),n("v-row",[n("p",[e._v("\n        Normalisation is one of the most important aspects of database\n        design. It is common to find databases that have more entities \n        than necessary. The same redundancy often happens to \n        entities' attributes as well. The "),n("b",[n("i",[e._v("normalisation")])]),e._v("\n        technique aims to minimise those redundancies by\n        finding the minimal set of entities and attributes required to meet\n        users' requirements.\n      ")]),e._v(" "),n("p",[e._v("\n        A normalised database is easier to manipulate and to understand.\n        Normalisation provides easy access to the database, prevents\n        maintenance overheads, and enhances user experience in general.\n        Additionally, new users will have a more compact learning curve\n        when being introduced to the database for the first time.\n      ")]),e._v(" "),n("p",[e._v("\n        Normalisation rules can be broken down into the\n        following normal forms:\n      ")])]),e._v(" "),n("v-row",[n("ol",[n("li",[e._v("First Normal Form")]),e._v(" "),n("li",[e._v("Second Normal Form")]),e._v(" "),n("li",[e._v("Third Normal Form")]),e._v(" "),n("li",[e._v("Boyce and Codd Normal Form (BCNF)")]),e._v(" "),n("li",[e._v("Fourth Normal Form")])])]),e._v(" "),n("br"),e._v(" "),n("v-row",[n("p",[e._v("\n        Once a database conforms to "),n("i",[e._v("all")]),e._v(" those forms, it can be\n        called "),n("b",[e._v("normalised")])])]),e._v(" "),n("br"),e._v(" "),n("v-row",[n("h3",{attrs:{id:"1nf"}},[e._v("First Normal Form (1NF)")])]),e._v(" "),n("v-row",[n("p",[e._v("\n        For a table to be in the 1NF, it must conform to \n        the following 4 rules:\n      ")])]),e._v(" "),n("v-row",[n("ol",[n("li",[n("b",[n("i",[e._v("Single Valued Attributes:")])]),e._v(' Each column in a table\n        should not contain multiple values. As a hypothetical example,\n        on a table defining a Location entity, an entry in the\n        column "country" cannot be "New Zealand & Brazil".\n        ')]),e._v(" "),n("li",[n("b",[n("i",[e._v("Attribute Domain does not change:")])]),e._v(' In each column,\n        the values stored must be of the same type.\n        On a table defining a Location entity, an entry in the column\n        "country" cannot be a number, while the other entries are a text.\n        ')]),e._v(" "),n("li",[n("b",[n("i",[e._v("Unique name for Attributes/Columns:")])]),e._v(' No repetition\n        of columns names within the same entity. The entity "Country" cannot\n        have two columns called "population".\n        ')]),e._v(" "),n("li",[n("b",[n("i",[e._v("Order doesn't matter:")])]),e._v(" The order that the data\n        is stored in the table does not affect any database operation.\n        ")])])]),e._v(" "),n("br"),e._v(" "),n("v-row",[n("h3",{attrs:{id:"2nf"}},[e._v("Second Normal Form (2NF)")])]),e._v(" "),n("v-row",[n("p",[e._v("A table is in the 2NF if:")])]),e._v(" "),n("v-row",[n("ol",[n("li",[n("b",[n("i",[e._v("It is in the First Normal Form (1NF)")])])]),e._v(" "),n("li",[n("b",[n("i",[e._v("Has Partial Dependency:")])]),e._v(' An attribute in a table\n        depends on a part of the primary key, but not on the whole key.\n        As an example, if we have an entity "Student Score" which\n        has the attributes: "student_id", "subject_id", "score", and\n        "teacher_name". The attribute "teacher_name" only depends on the\n        "subject_id", and the primary key of this table is the combination\n        of "student_id + subject_id".'),n("br"),e._v('\n        Note that to remove this dependency we only need to move\n        the "teacher_name" property to the "Subject" entity.\n        ')])])]),e._v(" "),n("v-row",[n("br"),e._v(" "),n("p",[n("b",[e._v("Alternative Definition")]),e._v(": A table is in the\n        first normal form and\n        every non-primary-key attribute is fully functionally dependent\n        on the primary key."),n("br"),e._v("\n        Note: A table with transitive dependencies can be in the 2NF.\n      ")])]),e._v(" "),n("br"),e._v(" "),n("v-row",[n("h3",{attrs:{id:"3nf"}},[e._v("Third Normal Form (3NF)")])]),e._v(" "),n("v-row",[n("p",[e._v("A table is in the 3NF if:")])]),e._v(" "),n("v-row",[n("ol",[n("li",[n("b",[n("i",[e._v("It is in the Second Normal Form (2NF)")])])]),e._v(" "),n("li",[n("b",[n("i",[e._v("Does not have Transitive Dependency (TD):")])]),e._v(' The TD\n        happens when a non-prime attribute has a dependency on another\n        non-prime attribute.\n        If a "Score" entity has the properties: "score_id", "student_id",\n        "subject_id", "marks", "exam_name", "total_marks".\n        The prime keys are "student_id" and "subject_id". But\n        the "total_marks" depends on the "exam_name", that does not belong\n        to the prime keys set. In this case, the solution is to create\n        a new "Exam" entity with the attributes: \n        "exam_name" and "total_marks"\n        ')])])]),e._v(" "),n("v-row",[n("br"),e._v(" "),n("p",[n("b",[e._v("Alternative Definition")]),e._v(":\n        A table is in the first and second normal form and\n        no non-primary-key attribute is transitively dependent\n        on the primary-key.\n      ")])]),e._v(" "),n("br"),e._v(" "),n("v-row",[n("h3",{attrs:{id:"BCNF"}},[e._v("Boyce and Codd Normal Form (BCNF)")])]),e._v(" "),n("v-row",[n("p",[e._v("A table is in the BCNF if:")])]),e._v(" "),n("v-row",[n("ol",[n("li",[n("b",[n("i",[e._v("It is in the Third Normal Form (3NF)")])])]),e._v(" "),n("li",[n("b",[n("i",[e._v("For each functional dependency (X -> Y), X should\n        be a super key.")])]),e._v(' If we have an entity "Students Subjects"\n        with the attributes: "student_id", "subject", and "professor",\n        we have "student_id" and "subject" as the primary keys. Given that\n        a subject can have multiple professors, there is a dependency\n        between professor -> subject. So we have an attribute\n        depending on a prime/super key. To solve this problem,\n        the solution is to create a "Professor" entity with the columns\n        "professor_id", "professor_name", and "subject".\n        ')])])]),e._v(" "),n("br"),e._v(" "),n("v-row",[n("h3",{attrs:{id:"4NF"}},[e._v("Fourth Normal Form (4NF)")])]),e._v(" "),n("v-row",[n("p",[e._v("A table is in the BCNF if:")])]),e._v(" "),n("v-row",[n("ol",[n("li",[n("b",[n("i",[e._v("It is in the Boyce and Codd Normal Form (BCNF)")])])]),e._v(" "),n("li",[n("b",[n("i",[e._v("There is no Multi-Valued Dependency")])]),e._v(' Given that\n        A -> B (B depends on A), if multiple values of B exist, then\n        the table has a multi-valued dependency. Imagine we have an\n        entity with three columns: "student_id", "course", and "hobby".\n        Both "course" and "hobby" depend on the student id. A way to fix it\n        is to create two entities: "Student Hobby", and "Student Course".\n        This dependency usually infers that the table has a combination\n        of columns that don\'t belong together. (Why are hobby and course\n        in the same table?)\n        ')])])]),e._v(" "),n("br")],1)],1)}),[],!1,null,"9eb4abc8",null);t.default=component.exports;d()(component,{VFlex:v.a,VLayout:c.a,VRow:h.a})}}]);