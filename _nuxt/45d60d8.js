(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{270:function(n,t,e){var content=e(348);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,e(33).default)("7de37854",content,!0,{sourceMap:!1})},347:function(n,t,e){"use strict";e(270)},348:function(n,t,e){var o=e(32)(!1);o.push([n.i,".graph-pic[data-v-60a5631e]{padding:30px 0;display:block;width:100%;margin:0 auto}",""]),n.exports=o},406:function(n,t,e){"use strict";e.r(t);var o={data:function(){return{firstPlotImg:"/images/data_visualisation/k_means_dataset_white.png",secondPlotImg:"/images/data_visualisation/k_means_first_centroids_white.png",thirdPlotImg:"/images/data_visualisation/k_means_first_clusters_white.png",forthPlotImg:"/images/data_visualisation/k_means_second_clusters_white.png",fifthPlotImg:"/images/data_visualisation/k_means_third_clusters_white.png"}},head:{title:"K-means Clustering From Scratch",meta:[{hid:"description",name:"description",content:"K-means Clustering From Scratch - Marcelo Fernandes"}]}},r=(e(347),e(58)),l=e(75),c=e.n(l),_=e(359),d=e(360),v=e(361),x=e(362),h=e(232),m=e(239),f=e(240),component=Object(r.a)(o,(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-layout",{staticClass:"post"},[e("v-flex",[e("v-row",[e("h1",[n._v("K-means Clustering From Scratch")])]),n._v(" "),e("v-row",[e("p",{staticClass:"caption"},[n._v("Date: 2021-03-15")])]),n._v(" "),e("v-row",[e("p",[n._v("\n          Find the K-means clusters for the given the dataset and K=3.\n        ")])]),n._v(" "),e("v-row",[e("p"),e("blockquote",[n._v("\n            A1 = (2,10),"),e("br"),n._v("\n            A2 = (2,5),"),e("br"),n._v("\n            A3 = (8,4),"),e("br"),n._v("\n            A4 = (5,8),"),e("br"),n._v("\n            A5 = (7,5),"),e("br"),n._v("\n            A6 = (6,4),"),e("br"),n._v("\n            A7 = (1,2),"),e("br"),n._v("\n            A8 = (4,9)\n          ")]),n._v(" "),e("p")]),n._v(" "),e("v-row",{staticClass:"graph-pic"},[e("v-row",[e("a",{staticClass:"img-link",attrs:{href:n.firstPlotImg,target:"_blank"}},[e("img",{attrs:{src:n.firstPlotImg}})])])],1),n._v(" "),e("v-row",[e("v-expansion-panels",[e("v-expansion-panel",[e("v-expansion-panel-header",[n._v("\n              [Expand] Python code for the graph above\n            ")]),n._v(" "),e("v-expansion-panel-content",[e("blockquote",[e("pre",[n._v("                  "),e("var",[n._v("\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\nx_coordinates = [2,2,8,5,7,6,1,4]\ny_coordinates = [10,5,4,8,5,4,2,9]\npoints = ['A1','A2','A3','A4','A5','A6','A7','A8']\n\n# graph configuration\nplt.grid(b=None)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.xlim([0,10.5])\nplt.ylim([0,11.2])\n\n# labels!\nfor point, x, y in zip(points, x_coordinates, y_coordinates):\n    label = f\"{point} ({x},{y})\"\n    plt.annotate(\n        label,\n        (x,y),\n        textcoords=\"offset points\", # how to position the text\n        xytext=(0,10), # distance from text to points (x,y)\n        ha='center' # horizontal alignment\n    )\n\n# plot!\nfig = plt.plot(x_coordinates, y_coordinates, 'o', color='black')")])])])])],1)],1)],1),n._v(" "),e("v-row",[e("h2",[n._v("\n          1. Select 3 random data points to be the center of your clusters.\n        ")])]),n._v(" "),e("v-row",[e("p",[n._v("\n          Let's select three numbers between 0 and the length of the dataset\n        ")])]),n._v(" "),e("v-row",[e("blockquote",[e("var",[e("pre",[n._v("import random\nindexes = random.sample(range(1, len(x_coordinates) + 1), 3)\nindexes\n>>> [1, 4, 7]\n        ")])])])]),n._v(" "),e("v-row",[e("p",[n._v("\n          This means that A1, A4, and A7 have been selected to be our initial\n          centroids.\n        ")])]),n._v(" "),e("v-row",{staticClass:"graph-pic"},[e("v-row",[e("a",{staticClass:"img-link",attrs:{href:n.secondPlotImg,target:"_blank"}},[e("img",{attrs:{src:n.secondPlotImg}})])])],1),n._v(" "),e("v-row",[e("v-expansion-panels",[e("v-expansion-panel",[e("v-expansion-panel-header",[n._v("\n              [Expand] Python code for the graph above\n            ")]),n._v(" "),e("v-expansion-panel-content",[e("blockquote",[e("pre",[n._v("                  "),e("var",[n._v("\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\nx_coordinates = [2,2,8,5,7,6,1,4]\ny_coordinates = [10,5,4,8,5,4,2,9]\ncentroids_x = [2,5,1]\ncentroids_y = [10,8,2]\npoints = ['A1','A2','A3','A4','A5','A6','A7','A8']\n\n# plot!\nfig = plt.figure()\nax = fig.add_subplot(111)\n\n# graph configuration\nplt.grid(b=None)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.xlim([0,10.5])\nplt.ylim([0,11.2])\n\n# labels!\nfor point, x, y in zip(points, x_coordinates, y_coordinates):\n    label = f\"{point} ({x},{y})\"\n    ax.annotate(\n        label,\n        (x,y),\n        textcoords=\"offset points\", # how to position the text\n        xytext=(0,10), # distance from text to points (x,y)\n        ha='center' # horizontal alignment\n    )\n\nax.scatter(\n    x_coordinates, y_coordinates, marker='o',\n    color='black', label='datapoints'\n)\nax.scatter(\n    centroids_x, centroids_y, marker='x',\n    color='red', label='centroids', s=120\n)\nax.legend()")])])])])],1)],1)],1),n._v(" "),e("v-row",[e("h2",[n._v("\n          2. For each point, find the the closest centroid.\n        ")])]),n._v(" "),e("v-row",[e("p",[n._v("\n          We calculate the distance between a given point and the three centroids.\n          The point is then assigned to the cluster belonging to the centroid\n          with the shortest distance.\n        ")]),n._v(" "),e("p",[n._v("\n          The distance will be calculated by:\n        ")])]),n._v(" "),e("v-row",[e("blockquote",[e("var",[e("pre",[n._v("Distance(v1, v2) = ( (v1.x - v2.x)**2 + (v1.y - v2.y)**2 ) **.5\n")])])])]),n._v(" "),e("v-row",{staticClass:"graph-pic"},[e("v-row",[e("a",{staticClass:"img-link",attrs:{href:n.thirdPlotImg,target:"_blank"}},[e("img",{attrs:{src:n.thirdPlotImg}})])])],1),n._v(" "),e("v-row",[e("v-expansion-panels",[e("v-expansion-panel",[e("v-expansion-panel-header",[n._v("\n              [Expand] Python code for the graph above\n            ")]),n._v(" "),e("v-expansion-panel-content",[e("blockquote",[e("pre",[n._v("                  "),e("var",[n._v("\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\npoints_names = ['A1','A2','A3','A4','A5','A6','A7','A8']\n\ndata_points = [[2,10], [2,5], [8,4], [5,8], [7,5], [6,4], [1,2], [4,9]]\nx_coordinates = [point[0] for point in data_points]\ny_coordinates = [point[1] for point in data_points]\n\ncentroid_1 = [2,10]\ncentroid_2 = [5,8]\ncentroid_3 = [1,2]\n\ncentroids = [centroid_1, centroid_2, centroid_3]\n\ncluster_1 = []\ncluster_2 = []\ncluster_3 = []\n\ndef distance(v1, v2):\n    return ( (v1[0] - v2[0])**2 + (v1[1] - v2[1])**2 )**0.5\n\nfor point in data_points:\n    dist_c1 = distance(point, centroids[0])\n    dist_c2 = distance(point, centroids[1])\n    dist_c3 = distance(point, centroids[2])\n    min_distance = min([dist_c1, dist_c2, dist_c3])\n    if min_distance == dist_c1:\n        cluster_1.append(point)\n    elif min_distance == dist_c2:\n        cluster_2.append(point)\n    else:\n        cluster_3.append(point)\n        \ncluster_1_x = [point[0] for point in cluster_1]\ncluster_2_x = [point[0] for point in cluster_2]\ncluster_3_x = [point[0] for point in cluster_3]\n\ncluster_1_y = [point[1] for point in cluster_1]\ncluster_2_y = [point[1] for point in cluster_2]\ncluster_3_y = [point[1] for point in cluster_3]\n    \n# initiate the plot\nfig = plt.figure()\nax = fig.add_subplot(111)\n\n# graph configuration\nplt.grid(b=None)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.xlim([0,10.5])\nplt.ylim([0,11.2])\n\n\n# labels\nfor point_name, x, y in zip(points_names, x_coordinates, y_coordinates):\n    label = f\"{point_name} ({x},{y})\"\n    ax.annotate(\n        label,\n        (x,y),\n        textcoords=\"offset points\", # how to position the text\n        xytext=(0,10), # distance from text to points (x,y)\n        ha='center' # horizontal alignment\n    )\n\n# plot the data\nax.scatter(\n    cluster_1_x, cluster_1_y, marker='o', \n    color='green', label='cluster 1'\n)\nax.scatter(\n    cluster_2_x, cluster_2_y, marker='o', \n    color='red', label='cluster 2'\n)\nax.scatter(\n    cluster_3_x, cluster_3_y, marker='o', \n    color='blue', label='cluster 2'\n)\nax.scatter(\n    centroid_1[0], centroid_1[1], marker='x', \n    color='green', label='centroid 1', s=120\n)\nax.scatter(\n    centroid_2[0], centroid_2[1], marker='x', \n    color='red', label='centroid 2', s=120\n)\nax.scatter(\n    centroid_3[0], centroid_3[1], marker='x', \n    color='blue', label='centroid 3', s=120\n)\nax.legend()")])])])])],1)],1)],1),n._v(" "),e("v-row",[e("h2",[n._v("3. Calculate the new centroids")])]),n._v(" "),e("v-row",[e("p",[n._v("New centroids can be calculated by finding the average\n        point in a given cluster:")])]),n._v(" "),e("v-row",[e("blockquote",[e("pre",[n._v("def new_centroid(cluster):\n    length = len(cluster)\n    mean_x = sum([x for x, _ in cluster])/length\n    mean_y = sum([y for _, y in cluster])/length\n    return [mean_x, mean_y]")])])]),n._v(" "),e("v-row",[e("p",[e("br"),n._v("Our new centroids will therefore be:\n        ")])]),n._v(" "),e("v-row",[e("blockquote",[e("pre",[n._v("[2.0, 10.0]\n[6.0, 6.0]\n[1.5, 3.5]")])])]),n._v(" "),e("v-row",[e("h2",[n._v("\n          4. Repeat\n        ")])]),n._v(" "),e("v-row",[e("p",[n._v("\n          Repeat steps 2. and 3. until the algorithm converges\n        ")])]),n._v(" "),e("v-row",[e("h3",[n._v("Second interaction")])]),n._v(" "),e("v-row",{staticClass:"graph-pic"},[e("v-row",[e("a",{staticClass:"img-link",attrs:{href:n.forthPlotImg,target:"_blank"}},[e("img",{attrs:{src:n.forthPlotImg}})])])],1),n._v(" "),e("v-row",[e("p",[e("br"),n._v("New centroids\n        ")])]),n._v(" "),e("v-row",[e("blockquote",[e("pre",[n._v("[3.0, 9.5]\n[6.5, 5.25]\n[1.5, 3.5]\n")])])]),n._v(" "),e("v-row",[e("h3",[n._v("Third interaction")])]),n._v(" "),e("v-row",{staticClass:"graph-pic"},[e("v-row",[e("a",{staticClass:"img-link",attrs:{href:n.fifthPlotImg,target:"_blank"}},[e("img",{attrs:{src:n.fifthPlotImg}})])])],1),n._v(" "),e("v-row",[e("p",[e("br"),n._v("New centroids\n        ")])]),n._v(" "),e("v-row",[e("blockquote",[e("pre",[n._v("[3.6666666666666665, 9.0]\n[7.0, 4.333333333333333]\n[1.5, 3.5]\n")])])]),n._v(" "),e("v-row",[e("h3",[n._v("Forth interaction (convergence)")])]),n._v(" "),e("v-row",{staticClass:"graph-pic"},[e("v-row",[e("a",{staticClass:"img-link",attrs:{href:n.fifthPlotImg,target:"_blank"}},[e("img",{attrs:{src:n.fifthPlotImg}})])])],1),n._v(" "),e("v-row",[e("p",[e("br"),n._v("New centroids (same as previous step)\n        ")])]),n._v(" "),e("v-row",[e("blockquote",[e("pre",[n._v("[3.6666666666666665, 9.0]\n[7.0, 4.333333333333333]\n[1.5, 3.5]\n")])])]),n._v(" "),e("v-row",[e("p",[e("br")])]),n._v(" "),e("v-row",[e("v-expansion-panels",[e("v-expansion-panel",[e("v-expansion-panel-header",[n._v("\n              [Expand] Python code for the graph above\n            ")]),n._v(" "),e("v-expansion-panel-content",[e("blockquote",[e("pre",[n._v("                  "),e("var",[n._v("\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\npoints_names = ['A1','A2','A3','A4','A5','A6','A7','A8']\n\ndata_points = [[2,10], [2,5], [8,4], [5,8], [7,5], [6,4], [1,2], [4,9]]\nx_coordinates = [point[0] for point in data_points]\ny_coordinates = [point[1] for point in data_points]\n\ncentroid_1 = [3.6666666666666665, 9.0]\ncentroid_2 = [7.0, 4.333333333333333]\ncentroid_3 = [1.5, 3.5]\n\ncentroids = [centroid_1, centroid_2, centroid_3]\n\ncluster_1 = []\ncluster_2 = []\ncluster_3 = []\n\ndef distance(v1, v2):\n    return ( (v1[0] - v2[0])**2 + (v1[1] - v2[1])**2 )**0.5\n\nfor point in data_points:\n    dist_c1 = distance(point, centroids[0])\n    dist_c2 = distance(point, centroids[1])\n    dist_c3 = distance(point, centroids[2])\n    min_distance = min([dist_c1, dist_c2, dist_c3])\n    if min_distance == dist_c1:\n        cluster_1.append(point)\n    elif min_distance == dist_c2:\n        cluster_2.append(point)\n    else:\n        cluster_3.append(point)\n        \ncluster_1_x = [point[0] for point in cluster_1]\ncluster_2_x = [point[0] for point in cluster_2]\ncluster_3_x = [point[0] for point in cluster_3]\n\ncluster_1_y = [point[1] for point in cluster_1]\ncluster_2_y = [point[1] for point in cluster_2]\ncluster_3_y = [point[1] for point in cluster_3]\n    \n# initiate the plot\nfig = plt.figure()\nax = fig.add_subplot(111)\n\n# graph configuration\nplt.grid(b=None)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.xlim([0,10.5])\nplt.ylim([0,11.2])\n\n\n# labels\nfor point_name, x, y in zip(points_names, x_coordinates, y_coordinates):\n    label = f\"{point_name} ({x},{y})\"\n    ax.annotate(\n        label,\n        (x,y),\n        textcoords=\"offset points\", # how to position the text\n        xytext=(0,10), # distance from text to points (x,y)\n        ha='center' # horizontal alignment\n    )\n\n# plot the data\nax.scatter(\n    cluster_1_x, cluster_1_y, marker='o', \n    color='green', label='cluster 1'\n)\nax.scatter(\n    cluster_2_x, cluster_2_y, marker='o', \n    color='red', label='cluster 2'\n)\nax.scatter(\n    cluster_3_x, cluster_3_y, marker='o', \n    color='blue', label='cluster 2'\n)\nax.scatter(\n    centroid_1[0], centroid_1[1], marker='x', \n    color='green', label='centroid 1', s=120\n)\nax.scatter(\n    centroid_2[0], centroid_2[1], marker='x', \n    color='red', label='centroid 2', s=120\n)\nax.scatter(\n    centroid_3[0], centroid_3[1], marker='x', \n    color='blue', label='centroid 3', s=120\n)\nax.legend()\n\ndef new_centroid(cluster):\n    length = len(cluster)\n    mean_x = sum([x for x, _ in cluster])/length\n    mean_y = sum([y for _, y in cluster])/length\n    return [mean_x, mean_y]\n\nprint(new_centroid(cluster_1))\nprint(new_centroid(cluster_2))\nprint(new_centroid(cluster_3))")])])])])],1)],1)],1)],1)],1)}),[],!1,null,"60a5631e",null);t.default=component.exports;c()(component,{VExpansionPanel:_.a,VExpansionPanelContent:d.a,VExpansionPanelHeader:v.a,VExpansionPanels:x.a,VFlex:h.a,VLayout:m.a,VRow:f.a})}}]);