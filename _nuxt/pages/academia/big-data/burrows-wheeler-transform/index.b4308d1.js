(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{217:function(e,t,n){"use strict";n(111);var r=n(74);t.a=Object(r.a)("layout")},218:function(e,t,n){"use strict";n(26),n(12);var r=n(3),o=(n(46),n(209),n(47),n(6),n(4),n(17),n(58),n(59),n(145),n(0)),l=n(112),v=n(2);function c(object,e){var t=Object.keys(object);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(object);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),t.push.apply(t,n)}return t}function A(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?c(Object(source),!0).forEach((function(t){Object(r.a)(e,t,source[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):c(Object(source)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(source,t))}))}return e}var _=["sm","md","lg","xl"],f=["start","end","center"];function h(e,t){return _.reduce((function(n,r){return n[e+Object(v.n)(r)]=t(),n}),{})}var d=function(e){return[].concat(f,["baseline","stretch"]).includes(e)},T=h("align",(function(){return{type:String,default:null,validator:d}})),B=function(e){return[].concat(f,["space-between","space-around"]).includes(e)},$=h("justify",(function(){return{type:String,default:null,validator:B}})),D=function(e){return[].concat(f,["space-between","space-around","stretch"]).includes(e)},G=h("alignContent",(function(){return{type:String,default:null,validator:D}})),w={align:Object.keys(T),justify:Object.keys($),alignContent:Object.keys(G)},I={align:"align",justify:"justify",alignContent:"align-content"};function y(e,t,n){var r=I[e];if(null!=n){if(t){var o=t.replace(e,"");r+="-".concat(o)}return(r+="-".concat(n)).toLowerCase()}}var m=new Map;t.a=o.a.extend({name:"v-row",functional:!0,props:A(A(A({tag:{type:String,default:"div"},dense:Boolean,noGutters:Boolean,align:{type:String,default:null,validator:d}},T),{},{justify:{type:String,default:null,validator:B}},$),{},{alignContent:{type:String,default:null,validator:D}},G),render:function(e,t){var n=t.props,data=t.data,o=t.children,v="";for(var c in n)v+=String(n[c]);var A=m.get(v);return A||function(){var e,t;for(t in A=[],w)w[t].forEach((function(e){var r=n[e],o=y(t,e,r);o&&A.push(o)}));A.push((e={"no-gutters":n.noGutters,"row--dense":n.dense},Object(r.a)(e,"align-".concat(n.align),n.align),Object(r.a)(e,"justify-".concat(n.justify),n.justify),Object(r.a)(e,"align-content-".concat(n.alignContent),n.alignContent),e)),m.set(v,A)}(),e(n.tag,Object(l.a)(data,{staticClass:"row",class:A}),o)}})},241:function(e,t,n){"use strict";n.r(t);var r={data:function(){return{}},head:{title:"BTW (Burrows-Wheeler-Transform)- MarceloFern",meta:[{hid:"description",name:"description",content:"Burrows Wheeler Transform (BWT) - Marcelo Fernandes"}]}},o=n(53),l=n(73),v=n.n(l),c=n(216),A=n(217),_=n(218),component=Object(o.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-layout",{staticClass:"post"},[n("v-flex",[n("v-row",[n("h1",[e._v("Burrows Wheeler Transform (BWT)")])]),e._v(" "),n("v-row",[n("p",{staticClass:"caption"},[e._v("Date: 2020-11-13")])]),e._v(" "),n("v-row",[n("p",[e._v("\n          BWT is a text transformation technique. It can be used to improve\n          the efficiency of data-compression algorithms (such as bzip2)."),n("br"),e._v("\n          The transformation can be reversed knowing just the\n          position of the first character.\n        ")]),e._v(" "),n("p",[e._v("\n          For a string that contains many repeated strings (or sub-strings),\n          such as:\n        ")])]),e._v(" "),n("v-row",[n("blockquote",[e._v("\n          Peter Piper picked a peck of pickled peppers\n          A peck of pickled peppers Peter Piper picked^\n        ")])]),e._v(" "),n("v-row",[n("p",[e._v("\n          The equivalent BWT string will be:\n        ")])]),e._v(" "),n("v-row",[n("blockquote",[e._v("\n          ssrrdkkaAddrrffd ^ eeiiiieeeeppkllkppttppppPPooppppPPcccccckk\n          iipp eeeeeeeerree\n        ")])]),e._v(" "),n("v-row",[n("p",[e._v("\n          Take a note of how many repeated characters are in the string above.\n          This output will be easy to compress due to the high number of\n          repeated characters.\n        ")])]),e._v(" "),n("v-row",[n("h2",[e._v("Example: Transforming a string into its BWT version")])]),e._v(" "),n("v-row",[n("p",[e._v("\n          Let's transform the string "),n("b",[e._v("BIGDATA$")]),e._v(". Note how $ is appended\n          to indicate the end of the string.\n        ")])]),e._v(" "),n("v-row",[n("ol",[n("li",[e._v("\n            Firstly, create a list with all the N circular shifts of your\n            input, where N = the string length:\n            "),n("br"),e._v(" "),n("ul",[n("li",[e._v("BIGDATA$")]),e._v(" "),n("li",[e._v("IGDATA$B")]),e._v(" "),n("li",[e._v("GDATA$BI")]),e._v(" "),n("li",[e._v("DATA$BIG")]),e._v(" "),n("li",[e._v("ATA$BIGD")]),e._v(" "),n("li",[e._v("TA$BIGDA")]),e._v(" "),n("li",[e._v("A$BIGDAT")]),e._v(" "),n("li",[e._v("$BIGDATA")])])]),n("li",[e._v("\n              Now we want to sort the circular shifts above alphabetically\n              (but considering the characters ^ and $ too)."),n("br"),e._v(" "),n("ul",[n("li",[e._v("$BIGDATA")]),e._v(" "),n("li",[e._v("A$BIGDAT")]),e._v(" "),n("li",[e._v("ATA$BIGD")]),e._v(" "),n("li",[e._v("BIGDATA$")]),e._v(" "),n("li",[e._v("DATA$BIG")]),e._v(" "),n("li",[e._v("GDATA$BI")]),e._v(" "),n("li",[e._v("IGDATA$B")]),e._v(" "),n("li",[e._v("TA$BIGDA")])])]),e._v(" "),n("li",[e._v("\n            The last step is to select the "),n("b",[e._v("last")]),e._v(" character of each\n            sorted entry from the list above. Therefore our result is:\n            "),n("b",[n("i",[e._v("ATD$GIBA")])])])])]),e._v(" "),n("v-row",[n("p",[e._v("Here is a Python script that would create this transform:")])]),e._v(" "),n("v-row",[n("blockquote",[n("pre",[e._v("def bwt_transform(string):\n    string += '$'\n    table = sorted(string[i:] + string[:i] for i in range(len(string)))\n    return ''.join([row[-1:] for row in table])\n        ")])])]),e._v(" "),n("v-row",[n("h2",[e._v("Example: Reverting the transformed string back")])]),e._v(" "),n("v-row",[n("p",[e._v("\n          Let's grab our string from the previous section\n          and revert it back to the original.\n        ")])]),e._v(" "),n("v-row",[n("ol",[n("li",[e._v("\n            Break the string down to its characters and sort them\n            alphabetically: "),n("b",[n("i",[e._v("$, A, A, B, D, G, I, T")])])]),e._v(" "),n("li",[e._v("\n            Break the string down again, append the previous group,\n            and sort it alphabetically:"),n("br"),e._v("\n            1: Break it down and append:\n            "),n("b",[n("i",[e._v("A$, TA, DA, $B, GD, IG, BI, AT")])]),n("br"),e._v("\n            2: Sort alphabetically:\n            "),n("b",[n("i",[e._v("$B, A$, AT, BI, DA, GD, IG, TA")])]),n("br")]),e._v(" "),n("li",[e._v("\n            This process is repeated over and over, until you have the full\n            length of the string:\n          ")]),e._v(" "),n("li",[n("ol",[n("li",[e._v("['$', 'A', 'A', 'B', 'D', 'G', 'I', 'T']")]),e._v(" "),n("li",[e._v("['$B', 'A$', 'AT', 'BI', 'DA', 'GD', 'IG', 'TA']")]),e._v(" "),n("li",[e._v("['$BI', 'A$B', 'ATA', 'BIG', 'DAT', 'GDA', 'IGD', 'TA$']")]),e._v(" "),n("li",[e._v("['$BIG', 'A$BI', 'ATA$', 'BIGD', 'DATA', 'GDAT', 'IGDA', 'TA$B']")]),e._v(" "),n("li",[e._v("['$BIGD', 'A$BIG', 'ATA$B', 'BIGDA', 'DATA$', 'GDATA', 'IGDAT', 'TA$BI']")]),e._v(" "),n("li",[e._v("['$BIGDA', 'A$BIGD', 'ATA$BI', 'BIGDAT', 'DATA$B', 'GDATA$', 'IGDATA', 'TA$BIG']")]),e._v(" "),n("li",[e._v("['$BIGDAT', 'A$BIGDA', 'ATA$BIG', 'BIGDATA', 'DATA$BI', 'GDATA$B', 'IGDATA$', 'TA$BIGD']")]),e._v(" "),n("li",[e._v("['$BIGDATA', 'A$BIGDAT', 'ATA$BIGD', 'BIGDATA$', 'DATA$BIG', 'GDATA$BI', 'IGDATA$B', 'TA$BIGDA']")])])]),e._v(" "),n("li",[e._v("\n            Then the last step is to find the element in the last list that\n            ends with $: "),n("b",[e._v("BIGDATA$")])])])]),e._v(" "),n("v-row",[n("p",[e._v("Here is a python script to reverse the BWT")])]),e._v(" "),n("v-row",[n("blockquote",[n("pre",[e._v("def bwt_reverse_transform(string):\n    table = [''] * len(string)\n    for i in range(len(string)):\n        table = sorted(string[i] + table[i] for i in range(len(string)))\n    return [i for i in table if i.endswith('$')][0]\n          ")])])]),e._v(" "),n("v-row")],1)],1)}),[],!1,null,"28426504",null);t.default=component.exports;v()(component,{VFlex:c.a,VLayout:A.a,VRow:_.a})}}]);