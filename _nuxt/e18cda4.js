(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{269:function(n,e,t){var content=t(346);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(33).default)("5de8714e",content,!0,{sourceMap:!1})},345:function(n,e,t){"use strict";t(269)},346:function(n,e,t){var o=t(32)(!1);o.push([n.i,".graph-pic[data-v-7eb26b88]{padding:10px 0;display:block;width:100%;margin:0 auto}",""]),n.exports=o},413:function(n,e,t){"use strict";t.r(e);var o={data:function(){return{firstPlotImg:"/images/data_visualisation/isolines_matplot_contour.png",marchingSquares:"/images/data_visualisation/marching_squares.png",drawIsoline:"/images/data_visualisation/isoline_drawn.png"}},head:{title:"Isolines From Scratch",meta:[{hid:"description",name:"description",content:"Isolines from scratch - Marcelo Fernandes"}]}},r=(t(345),t(58)),l=t(75),_=t.n(l),c=t(359),h=t(360),v=t(361),m=t(362),d=t(232),f=t(239),x=t(240),component=Object(r.a)(o,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("v-layout",{staticClass:"post"},[t("v-flex",[t("v-row",[t("h1",[n._v("Isolines From Scratch")])]),n._v(" "),t("v-row",[t("p",{staticClass:"caption"},[n._v("Date: 2021-03-21")])]),n._v(" "),t("v-row",[t("h2",[n._v("Definition")])]),n._v(" "),t("v-row",[t("p",[n._v("\n          Isolines are lines on a map (or graph) connecting datapoints\n          of the same value. Isolines are often used in Geography for\n          studying patterns of temperature, height, rain, etc.\n        ")])]),n._v(" "),t("v-row",[t("h2",[n._v("Example")])]),n._v(" "),t("v-row",[t("p",[n._v("\n          Suppose that a client's marketing department wants you to plot\n          an isoline graph in order to identify customers with the same\n          budget capabilities. The dataset is normalized to 200 and\n          is shown below:\n        ")])]),n._v(" "),t("v-row",[t("blockquote",[t("pre",[n._v("19x21 matrix:\n\n[[162,145,130,117,106,97,90,85,82,81,82,85,90,97,106,117,130,145,162,181,200],\n[145,128,113,100,89,80,73,68,65,64,65,68,73,80,89,100,113,128,145,164,185],\n[130,113,98,85,74,65,58,53,50,49,50,53,58,65,74,85,98,113,130,149,170],\n[117,100,85,72,61,52,45,40,37,36,37,40,45,52,61,72,85,100,117,136,157],\n[106,89,74,61,50,41,34,29,26,25,26,29,34,41,50,61,74,89,106,125,146],\n[97,80,65,52,41,32,25,20,17,16,17,20,25,32,41,52,65,80,97,116,137],\n[90,73,58,45,34,25,18,13,10,9,10,13,18,25,34,45,58,73,90,109,130],\n[85,68,53,40,29,20,13,8,5,4,5,8,13,20,29,40,53,68,85,104,125],\n[82,65,50,37,26,17,10,5,2,1,2,5,10,17,26,37,50,65,82,101,122],\n[81,64,49,36,25,16,9,4,1,0,1,4,9,16,25,36,49,64,81,100,121],\n[82,65,50,37,26,17,10,5,2,1,2,5,10,17,26,37,50,65,82,101,122],\n[85,68,53,40,29,20,13,8,5,4,5,8,13,20,29,40,53,68,85,104,125],\n[90,73,58,45,34,25,18,13,10,9,10,13,18,25,34,45,58,73,90,109,130],\n[97,80,65,52,41,32,25,20,17,16,17,20,25,32,41,52,65,80,97,116,137],\n[106,89,74,61,50,41,34,29,26,25,26,29,34,41,50,61,74,89,106,125,146],\n[117,100,85,72,61,52,45,40,37,36,37,40,45,52,61,72,85,100,117,136,157],\n[130,113,98,85,74,65,58,53,50,49,50,53,58,65,74,85,98,113,130,149,170],\n[145,128,113,100,89,80,73,68,65,64,65,68,73,80,89,100,113,128,145,164,185],\n[162,145,130,117,106,97,90,85,82,81,82,85,90,97,106,117,130,145,162,181,200]]")])])]),n._v(" "),t("v-row",[t("p",[t("br"),n._v("\n          We want to plot the isoline for the isovalue of 11.\n        ")]),n._v(" "),t("p",[n._v("\n          Before building the algorithm from scratch, let's use matplotlib's\n          countour function to see what we are looking at:\n        ")])]),n._v(" "),t("v-row",{staticClass:"graph-pic"},[t("v-row",[t("a",{staticClass:"img-link",attrs:{href:n.firstPlotImg,target:"_blank"}},[t("img",{attrs:{src:n.firstPlotImg}})])])],1),n._v(" "),t("v-row",[t("v-expansion-panels",[t("v-expansion-panel",[t("v-expansion-panel-header",[n._v("\n              [Expand] Python code for the graph above\n            ")]),n._v(" "),t("v-expansion-panel-content",[t("blockquote",[t("var",[t("pre",[n._v("import matplotlib\nimport numpy as np\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\n\nx = np.arange(1, 22, 1)\ny = np.arange(1, 20, 1)\nX, Y = np.meshgrid(x, y)\n\nZ = [[162,145,130,117,106,97,90,85,82,81,82,85,90,97,106,117,130,145,162,181,200],\n[145,128,113,100,89,80,73,68,65,64,65,68,73,80,89,100,113,128,145,164,185],\n[130,113,98,85,74,65,58,53,50,49,50,53,58,65,74,85,98,113,130,149,170],\n[117,100,85,72,61,52,45,40,37,36,37,40,45,52,61,72,85,100,117,136,157],\n[106,89,74,61,50,41,34,29,26,25,26,29,34,41,50,61,74,89,106,125,146],\n[97,80,65,52,41,32,25,20,17,16,17,20,25,32,41,52,65,80,97,116,137],\n[90,73,58,45,34,25,18,13,10,9,10,13,18,25,34,45,58,73,90,109,130],\n[85,68,53,40,29,20,13,8,5,4,5,8,13,20,29,40,53,68,85,104,125],\n[82,65,50,37,26,17,10,5,2,1,2,5,10,17,26,37,50,65,82,101,122],\n[81,64,49,36,25,16,9,4,1,0,1,4,9,16,25,36,49,64,81,100,121],\n[82,65,50,37,26,17,10,5,2,1,2,5,10,17,26,37,50,65,82,101,122],\n[85,68,53,40,29,20,13,8,5,4,5,8,13,20,29,40,53,68,85,104,125],\n[90,73,58,45,34,25,18,13,10,9,10,13,18,25,34,45,58,73,90,109,130],\n[97,80,65,52,41,32,25,20,17,16,17,20,25,32,41,52,65,80,97,116,137],\n[106,89,74,61,50,41,34,29,26,25,26,29,34,41,50,61,74,89,106,125,146],\n[117,100,85,72,61,52,45,40,37,36,37,40,45,52,61,72,85,100,117,136,157],\n[130,113,98,85,74,65,58,53,50,49,50,53,58,65,74,85,98,113,130,149,170],\n[145,128,113,100,89,80,73,68,65,64,65,68,73,80,89,100,113,128,145,164,185],\n[162,145,130,117,106,97,90,85,82,81,82,85,90,97,106,117,130,145,162,181,200]]\n\nfig, ax = plt.subplots()\nCS = ax.contour(X, Y, Z, levels=[10, 20, 30, 50, 80, 130, 180])\nax.clabel(CS, inline=True, fontsize=10)\nax.set_title('Isolines graph')")])])])])],1)],1)],1),n._v(" "),t("v-row",[t("h2",[n._v("Marching Squares")])]),n._v(" "),t("v-row",[t("p",[n._v('\n          "Marching squares" is an algorithm that efficiently helps us\n          to build isolines. The algorithm is better explained via the image\n          below (courtesy of wikipedia):\n        ')])]),n._v(" "),t("v-row",{staticClass:"graph-pic"},[t("v-row",[t("a",{staticClass:"img-link",attrs:{href:n.marchingSquares,target:"_blank"}},[t("img",{attrs:{src:n.marchingSquares}})])])],1),n._v(" "),t("v-row",[t("h2",[n._v("Step 1. Create the threshold matrix")])]),n._v(" "),t("v-row",[t("p",[n._v("\n          The threshold matrix is created by going over the original matrix\n          and substituting the original values by:\n        ")])]),n._v(" "),t("v-row",[t("p",[t("ul",[t("li",[n._v("\n              1 when when the original value is above the isovalue.\n            ")]),n._v(" "),t("li",[n._v("\n              0 when the original value is below the isovalue.\n            ")])])])]),n._v(" "),t("v-row",[t("p",[n._v("\n          For the isovalue of 11, we then have the following threshold matrix:\n          "),t("br")])]),n._v(" "),t("v-row",[t("blockquote",[t("var",[t("pre",[n._v("[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]")])])])]),n._v(" "),t("v-row",[t("p",[n._v("\n          The above already give us a clue about where the isolines will be\n          drawn. Check the location where we have groups of zeros.\n        ")])]),n._v(" "),t("v-row",[t("h2",[n._v("\n          Step 2. Map each cell to a number that corresponds to which\n          corners are true/false\n        ")])]),n._v(" "),t("v-row",[t("p",[n._v("\n          The threshold matrix can be mapped into squares,\n          where each data value is the vertex of a square. These corners\n          can either be true or false. This gives us the following amount of\n          combinations:\n        ")]),n._v(" "),t("p",[n._v("\n          (true or false) * (true or false) * (true or false) * (true or false) = \n        ")]),n._v(" "),t("p",[n._v("\n          2 * 2 * 2 * 2 = 16\n        ")]),n._v(" "),t("p",[n._v("\n          We can then proceed with the following mapping of cases:\n        ")])]),n._v(" "),t("v-row",[t("ul",[t("li",[n._v("\n            Case 0 - All corners are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 1 - All corners except the bottom left are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 2 - All corners except the bottom right are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 3 - Only the top corners are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 4 - All corners except the top right are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 5 - Left upper corner and low right corner are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 6 - Left top/bottom corners are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 7 - Only the top left corner is True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 8 - All corners except the top left are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 9 - Right top/bottom corners are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 10 - Top right corner and bottom left corner are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 11 - Only the top right corner is True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 12 - Only the bottom corners are True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 13 - Only the bottom right corner is True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 14 - Only the bottom left corner is True\n          ")]),n._v(" "),t("li",[n._v("\n            Case 15 - No corners are True\n          ")])])]),n._v(" "),t("v-row",[t("p",[t("br"),n._v("\n          An example of Python algorithm to rewrite the threshold matrix\n          into the cases matrix:\n        ")])]),n._v(" "),t("v-row",[t("v-expansion-panels",[t("v-expansion-panel",[t("v-expansion-panel-header",[n._v("\n              [Expand] Python code for the graph above\n            ")]),n._v(" "),t("v-expansion-panel-content",[t("blockquote",[t("pre",[n._v('case_0 = [[1,1],[1,1]]\ncase_1 = [[1,1],[0,1]]\ncase_2 = [[1,1],[1,0]]\ncase_3 = [[1,1],[0,0]]\ncase_4 = [[1,0],[1,1]]\ncase_5 = [[1,0],[0,1]]\ncase_6 = [[1,0],[1,0]]\ncase_7 = [[1,0],[0,0]]\ncase_8 = [[0,1],[1,1]]\ncase_9 = [[0,1],[0,1]]\ncase_10 = [[0,1],[1,0]]\ncase_11 = [[0,1],[0,0]]\ncase_12 = [[0,0],[1,1]]\ncase_13 = [[0,0],[0,1]]\ncase_14 = [[0,0],[1,0]]\ncase_15 = [[0,0], [0,0]]\n\ncases = [\n    case_0, case_1, case_2, case_3,\n    case_4, case_5, case_6, case_7, \n    case_8, case_9, case_10, case_11, \n    case_12, case_13, case_14, case_15\n]\n\ncases_mapper = {str(case): i for i, case in enumerate(cases)}\n\ndef get_corners_matrix(row, column):\n    """\n    Get the corners matrix:\n      [[top_left, top_right], [bottom_left, bottom_right]]\n\n    where top_left is the position of the entry itself.\n    """\n    return [\n        [\n            threshold_matrix[row][column],\n            threshold_matrix[row][column + 1],\n        ],\n        [\n            threshold_matrix[row + 1][column],\n            threshold_matrix[row + 1][column + 1],\n        ]\n    ]\n\nmapped_matrix = []\n\nfor row in range(len(threshold_matrix) - 1):\n    mapped_row = []\n    for column in range(len(threshold_matrix[0]) - 1):\n        corners_matrix = get_corners_matrix(row, column)\n        mapped_row.append(cases_mapper[str(corners_matrix)])\n    mapped_matrix.append(mapped_row)\n')])])])],1)],1)],1),n._v(" "),t("v-row",[t("p",[n._v("\n          Note: The mapped matrix has the dimension M-1,N-1 since the last\n          row and the last column aren't mapped.\n        ")])]),n._v(" "),t("v-row",[t("h2",[n._v("\n          Step 3. Draw the patterns\n        ")])]),n._v(" "),t("v-row",{staticClass:"graph-pic"},[t("v-row",[t("a",{staticClass:"img-link",attrs:{href:n.drawIsoline,target:"_blank"}},[t("img",{attrs:{src:n.drawIsoline}})])])],1),n._v(" "),t("v-row",[t("v-expansion-panels",[t("v-expansion-panel",[t("v-expansion-panel-header",[n._v("\n              [Expand] Python code for the graph above\n            ")]),n._v(" "),t("v-expansion-panel-content",[t("blockquote",[t("pre",[n._v("x_threshold = 21\ny_threshold = 19\n\n# graph configuration\nplt.style.use('seaborn-whitegrid')\nplt.grid(b=None)\nplt.xticks([])\nplt.yticks([])\nplt.xlim([-1,x_threshold])\nplt.ylim([-1,y_threshold])\n\ndef plot_line(x,y,case):\n    middle_y_left = [x, (y_threshold -1) - y - 0.5]\n    middle_y_right = [x + 1, (y_threshold -1) - y - 0.5]\n    middle_x_top = [x + 0.5, (y_threshold -1) - y]\n    middle_x_bottom = [x + 0.5, (y_threshold -1) - y - 1]\n    \n    if case in [1, 14]:\n        from_point = middle_y_left\n        to_point = middle_x_bottom\n    elif case in [2, 13]:\n        from_point = middle_x_bottom\n        to_point = middle_y_right\n    elif case in [3, 12]:\n        from_point = middle_y_left\n        to_point = middle_y_right\n    elif case in [4, 11]:\n        from_point = middle_x_top\n        to_point = middle_y_right\n    elif case == 5:\n        # case 5 is a composition of case 2 + case 7\n        plot_line(x, y, case=2)\n        plot_line(x, y, case=7)\n        return\n    elif case in [6, 9]:\n        from_point = middle_x_top\n        to_point = middle_x_bottom\n    elif case in [7,8]:\n        from_point = middle_y_left\n        to_point = middle_x_top\n    else:\n        # Never draw for case 0 or 15\n        return\n    x = [from_point[0],to_point[0]]\n    y = [from_point[1],to_point[1]]\n    plt.plot(x, y, color='black')\n    \nfor r_index, row in enumerate(mapped_matrix):\n    for c_index, column in enumerate(row):\n        plot_line(x=c_index, y=r_index, case=column)\n        \nfor r_index, row in enumerate(Z):\n    for c_index, column in enumerate(row):\n        label = str(column)\n        plt.annotate(\n            label,\n            (c_index,r_index),\n            ha='center',\n            va='center',\n        )\n")])])])],1)],1)],1),n._v(" "),t("v-row",[t("h2",[n._v("Step 4. Linear interpolation")])]),n._v(" "),t("v-row",[t("p",[n._v("\n          This is the last step to get our final isoline. It is also the most\n          complex one to code. I'll update this in the future if I ever\n          get the patience! (sorry, but let me know if you want this\n          to happen by flicking me an email).\n          "),t("s",[n._v("Step 3 should give you a good approximation nonetheless")])])])],1)],1)}),[],!1,null,"7eb26b88",null);e.default=component.exports;_()(component,{VExpansionPanel:c.a,VExpansionPanelContent:h.a,VExpansionPanelHeader:v.a,VExpansionPanels:m.a,VFlex:d.a,VLayout:f.a,VRow:x.a})}}]);